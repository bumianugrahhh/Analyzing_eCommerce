-- TASK 1

-- Terdapat 8 file csv, langkah pertama membuat sebuah database baru. 
-- Kemudian didalam database tersebut kita lakukan query untuk membuat 8 table 
-- dan menyesuaikan tipe dari setiap kolom berdasarkan pada dataset di file csv.
-- Lalu meng-import file csv kedalam masing-masing table tersebut.

create table orders (
	order_id text primary key not null,
	customer_id text,
	order_status varchar,
	order_purchase_timestamp timestamp,
	order_approved_at timestamp,
	order_delivered_carrier_date timestamp,
	order_delivered_customer_date timestamp,
	order_estimated_delivery_date timestamp
);

create table payments (
	order_id text,
	payment_sequential int,
	payment_type varchar,
	payment_installments int,
	payment_value float4
);

create table reviews (
	review_id text not null,
	order_id text,
	review_score int,
	review_comment_title varchar,
	review_comment_message text,
	review_creation_date timestamp,
	review_answer_timestamp timestamp
);

create table customers (
	customer_id text primary key not null,
	customer_unique_id text,
	customer_zip_code_prefix int,
	customer_city varchar,
	customer_state varchar
);
create table geolocations (
	geolocation_zip_code_prefix int not null,
	geolocation_lat numeric,
	geolocation_lng numeric,
	geolocation_city varchar,
	geolocation_state varchar
);

create table sellers (
	seller_id text primary key not null,
	seller_zip_code_prefix int, 
	seller_city varchar,
	seller_state varchar
);


create table order_items (
	order_id text,
	order_item_id int not null,
	product_id text,
	seller_id text,
	shipping_limit_date timestamp,
	price float4,
	freight_value float4
);

create table products (
	product_id text primary key not null,
	product_category_name varchar,
	product_name_lenght int,
	product_description_lenght int,
	product_photos_qty int,
	product_weight_g int,
	product_length_cm int, 
	product_height_cm int,
	product_width_cm int
);

-- Membuat Entity Relationship Diagram (ERD)

-- Ketika semua table telah berhasil dibuat dan di import file csv kedalamnya,
-- kemudian saya memanfaatkan ERD tools yang merupakan fitur dari pgadmin4 untuk membuat diagram tersebut. 
-- Lalu memasukkan semua table yang telah kita buat tadi kedalam ERD tools, 
-- kemudian kita menambahkan constraint foreign key dari masing-masing table yang berelasi. 
-- Setelah semua table yang berelasi berhasil dibuat kemudian kita generated SQL hasil dari pembuatan diagram tersebut 
-- dan meng-export ERD dalam bentuk gambar

-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

BEGIN;

CREATE TABLE IF NOT EXISTS public.products
(
    product_id text COLLATE pg_catalog."default" NOT NULL,
    product_category_name character varying COLLATE pg_catalog."default",
    product_name_lenght integer,
    product_description_lenght integer,
    product_photos_qty integer,
    product_weight_g integer,
    product_length_cm integer,
    product_height_cm integer,
    product_width_cm integer,
    CONSTRAINT products_pkey PRIMARY KEY (product_id)
);

CREATE TABLE IF NOT EXISTS public.order_items
(
    order_id text COLLATE pg_catalog."default",
    order_item_id integer NOT NULL,
    product_id text COLLATE pg_catalog."default",
    seller_id text COLLATE pg_catalog."default",
    shipping_limit_date timestamp without time zone,
    price real,
    freight_value real
);

CREATE TABLE IF NOT EXISTS public.sellers
(
    seller_id text COLLATE pg_catalog."default" NOT NULL,
    seller_zip_code_prefix integer,
    seller_city character varying COLLATE pg_catalog."default",
    seller_state character varying COLLATE pg_catalog."default",
    CONSTRAINT sellers_pkey PRIMARY KEY (seller_id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    order_id text COLLATE pg_catalog."default" NOT NULL,
    customer_id text COLLATE pg_catalog."default",
    order_status character varying COLLATE pg_catalog."default",
    order_purchase_timestamp timestamp without time zone,
    order_approved_at timestamp without time zone,
    order_delivered_carrier_date timestamp without time zone,
    order_delivered_customer_date timestamp without time zone,
    order_estimated_delivery_date timestamp without time zone,
    CONSTRAINT orders_pkey PRIMARY KEY (order_id)
);


CREATE TABLE IF NOT EXISTS public.geolocations
(
    geolocation_zip_code_prefix integer NOT NULL,
    geolocation_lat numeric,
    geolocation_lng numeric,
    geolocation_city character varying COLLATE pg_catalog."default",
    geolocation_state character varying COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.customers
(
    customer_id text COLLATE pg_catalog."default" NOT NULL,
    customer_unique_id text COLLATE pg_catalog."default",
    customer_zip_code_prefix integer,
    customer_city character varying COLLATE pg_catalog."default",
    customer_state character varying COLLATE pg_catalog."default",
    CONSTRAINT customers_pkey PRIMARY KEY (customer_id),
    CONSTRAINT customers_customer_unique_id_key UNIQUE (customer_unique_id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    order_id text COLLATE pg_catalog."default",
    payment_sequential integer,
    payment_type character varying COLLATE pg_catalog."default",
    payment_installments integer,
    payment_value real
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id text COLLATE pg_catalog."default" NOT NULL,
    order_id text COLLATE pg_catalog."default",
    review_score integer,
    review_comment_title character varying COLLATE pg_catalog."default",
    review_comment_message text COLLATE pg_catalog."default",
    review_creation_date timestamp without time zone,
    review_answer_timestamp timestamp without time zone
);

ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT product_id FOREIGN KEY (product_id)
    REFERENCES public.products (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT seller_id FOREIGN KEY (seller_id)
    REFERENCES public.sellers (seller_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sellers
    ADD CONSTRAINT zip_code_prefix FOREIGN KEY (seller_zip_code_prefix)
    REFERENCES public.geolocations (geolocation_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT customer_id FOREIGN KEY (customer_id)
    REFERENCES public.customers (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;



ALTER TABLE IF EXISTS public.customers
    ADD CONSTRAINT zip_code FOREIGN KEY (customer_zip_code_prefix)
    REFERENCES public.geolocations (geolocation_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
